#!/bin/bash
#---------------------------------------------------------------------------------------------------
# Script to move a file from one place to another. Restrictions to application of course apply :-)
#
# Author: C.Paus                                                                      (May 06, 2010)
#---------------------------------------------------------------------------------------------------
t2tools.py --action=mv  --source=$1 --target=$2

###!/usr/bin/env python
##import os,sys,getopt,re,subprocess
##import srm
##
##server = os.environ['T2TOOLS_SERVER']
##t2user = os.environ['T2TOOLS_USER']
##
##def exeCmd(cmd):
##
##    f = cmd.split(" ")
##    proc = subprocess.Popen(f,stderr=subprocess.STDOUT,stdout=subprocess.PIPE)
##
##    # trap potential return codes from rglexec
##    rc = -1
##    for line in proc.stdout:
##        if 'RC: ' in line:
##            rc = (line[:-1].split(" ")).pop()
##            rc = int(rc)
##
##    # just wait until it is done
##    proc.wait()
##    status = proc.returncode
##
##    # trap the internal return code
##    if f[0].startswith('rglexec'):
##        status = rc
##
##    return status
##        
##
##def debugPrint(text):
##
##    if debug==1:
##        print ' DEBUG: ' + text
##
##def clean(file):
##
##    if   re.search('root:',file):
##        g = file.split('/')
##        file = '/'.join(g[3:])
##        file = '/mnt/hadoop/cms' + file
##
##    debugPrint(' Cleaned: ' + file)
##
##    return file
##
##def exists(path):
##
##    if   path.startswith('/mnt/hadoop/cms/store'):
##        debugPrint(' Identified a tier-2 directory: ' + path)
##        cmd = 'rglexec ls -1 ' + path
##    elif path.startswith('/cms/store'):
##        debugPrint(' Identified a tier-2 directory: ' + path)
##        cmd = 'rglexec hdfs dfs -ls ' + path
##    else:
##        debugPrint(' Identified a normal directory: ' + path)
##        cmd = 'ls -1 ' + path + '>\& /dev/null'
##            
##    debugPrint(' Cmd:    %s' % cmd)
##    status = exeCmd(cmd)
##    debugPrint(' Status: %d' % int(status))
##
##    return (status == 0)
##
##def move(source,target):
##
##    if   target.startswith('/mnt/hadoop/cms/store'):
##        cmd = 'rglexec mv ' + source + ' ' + target ## + ' >& /dev/null'
##    elif target.startswith('/cms/store'):
##        cmd = 'rglexec hdfs dfs -mv ' + source + ' ' + target ## + ' >& /dev/null'
##    else:
##        debugPrint(' Identified a normal directory')
##        cmd = 'mv ' + source + ' ' + target
##
##    # ready to perfrom the requested operation
##    debugPrint('  -> moving with: ' + cmd)
##    status = 0
##    status = exeCmd(cmd)
##
##    return status
##
###===================================================================================================
### Main starts here
###===================================================================================================
### Define string to explain usage of the script
##usage =  "Usage: list  <source>  <target>"
##usage += "             --debug\n"
##usage += "             --help\n"
##
### Define the valid options which can be specified and check out the command line
##valid = ['debug=','help']
##try:
##    opts, args = getopt.getopt(sys.argv[1:], "", valid)
##except getopt.GetoptError, ex:
##    print usage
##    print str(ex)
##    sys.exit(1)
##
### --------------------------------------------------------------------------------------------------
### Get all parameters for the production
### --------------------------------------------------------------------------------------------------
### Set defaults for each option
##debug = 0
##
### Read new values from the command line
##for opt, arg in opts:
##    if   opt == '--help':
##        print usage
##        sys.exit(0)
##    elif opt == '--debug':
##        debug = int(arg)
##
##newArgv = []
##for arg in sys.argv[1:]:
##    if arg[:2] == "--":
##        continue
##    else:
##        newArgv.append(arg)
##
### Define source and target
##source = clean(newArgv[0])
##target = clean(newArgv[1])
##
##debugPrint("\n Moving: " + source + "\n     to  " + target + "\n")
##status = move(source,target)
##
##debugPrint(' INFO: %s -> %s'%(source,target))
##print "rc: %d"%status
