#!/usr/bin/env python
#---------------------------------------------------------------------------------------------------
# Script to remove a file.
#
# Author: C.Paus                                                                      (May 06, 2010)
#---------------------------------------------------------------------------------------------------
import os,sys,getopt,re,srm
t2user = os.environ['T2TOOLS_USER']

def debugPrint(text,debug):
    if debug:
        print ' DEBUG: ' + text

def execute(cmd,debug):
    if debug:
        debugPrint(cmd,debug)
    else:
        os.system(cmd)

def clean(file,debug):
    if   re.search('dcap:',file):
        g = file.split('/')
        file = '/'.join(g[3:])
    debugPrint(' Cleaned: ' + file,debug)

    return file

def remove(source,debug):
    cmd = 'rglexec hdfs dfs -rm ' + source

    # ready to perform the requested operation
    debugPrint('  -> removing with: ' + cmd,debug)
    status = 0
    status = os.system(cmd)
    if status != 0:
        print ' ERROR: remove returned error %d (on %s)'%(status,cmd)

    return status

def removeCatalog(source,debug):
    tmp = os.getpid()
    pid = "%d"%tmp
    # which catalog is this one in?
    catalogDir = '/home/cmsprod/catalog/local'
    if   re.search('/castor/cern.ch/',source):
        catalogDir = '/home/cmsprod/catalog/cern'
    elif re.search('/mnt/hadoop/cms/store/user/paus',source):
        catalogDir = '/home/cmsprod/catalog/t2mit'
    # now get the dataset and the book
    f       = source.split('/')
    file    = f[-1]
    dataset = f[-2]
    book    = f[-4] + '/' + f[-3]

    dir     = catalogDir + '/' + book + '/' + dataset

    # now remove the particular file from the record
    cmd = 'cat ' + dir + '/RawFiles.?? | sort -u | grep -v ' + file + ' > /tmp/RawFiles.00.' + pid
    execute(cmd,debug)
    cmd = 'rm ' + dir + '/RawFiles.??'
    execute(cmd,debug)
    cmd = 'mv /tmp/RawFiles.00.' + pid + ' ' + dir + '/RawFiles.00'
    execute(cmd,debug)
    cmd = 'cat ' + dir + '/Files | grep -v ' + file + ' > /tmp/Files.' + pid
    execute(cmd,debug)
    cmd = 'mv /tmp/Files.' + pid + ' ' + dir + '/Files'
    execute(cmd,debug)

    return

#===================================================================================================
# Main starts here
#===================================================================================================
# Define string to explain usage of the script
usage =  "Usage: remove  <source>"
usage += "               --catalog\n"
usage += "               --debug\n"
usage += "               --help\n"

# Define the valid options which can be specified and check out the command line
valid = ['catalog','debug','help']
try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print usage
    print str(ex)
    sys.exit(1)

# --------------------------------------------------------------------------------------------------
# Get all parameters for the production
# --------------------------------------------------------------------------------------------------
# Set defaults for each option
catalog = False
debug   = False

# Read new values from the command line
for opt, arg in opts:
    if   opt == '--help':
        print usage
        sys.exit(0)
    elif opt == '--debug':
        debug   = True
    elif opt == '--catalog':
        catalog = True

newArgv = []
for arg in sys.argv[1:]:
    if arg[:2] == "--":
        continue
    else:
        newArgv.append(arg)

# Define source and target
source = clean(newArgv[0],debug)

# remove it
remove(source,debug)

# Remove also the catalog entry
if catalog:
    removeCatalog(source,debug)
